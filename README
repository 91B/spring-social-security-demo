Simple Hello World Webapp demonstrating spring-social-security module.

Demonstrates delegating to Twitter for login for a webapp, and subsequent connection of locally logged in user accounts
to Facebook.   Also demonstrates authentication flow on a non-authorized user attempting to access a protected
resource (delegation to third party provider for auth, followed by redirect back to locally protected url).

/src/main/resources/environment.properties must be populated with Twitter consumer key and secret and Facebook clientId
and secret for this application to run.   The return url of the Facebook client account must also be configured
to be the connection url for this application - http://localhost:8080/connect/facebook. As Twitter allows any return
url by default, no such requirement is needed for the Twitter client account.

Twitter and Facebook are two arbitrary spring-social providers - alternative providers can be used instead - they
must simply be registered in place of the Twitter/Facebook connection factory classes in SpringSocialSecurityDemoWebappConfig.

This webapp consists of a basic implementation of Spring Social framework, configured with an in-memory datasource
for persistence of UserConnection data.   This in-memory datasource (configured in spring-config.xml) can be replaced
with custom datasource as necessary.  The PostContruct method in SpringSocialSecurityDemoWebappConfig can be removed if the
in-memory database is replaced.

To start the application, ensure that you have built and deployed spring-social-security to your maven repository, 
and clone the spring-social-security-demo project.  Once the Twitter and Facebook client details have been populated in the
environment.properties file, and the Facebook client account has been set up with a return url of http://localhost:8080/connect/facebook,
the application can be started using the in-built Jetty plugin:

mvn jetty:run

from the base directory of the spring-social-security-demo project.

Access http://localhost:8080/ in your web browser.

The application has two primary pages, the public home page ( http://localhost:8080/ ) and a protected resource
( http://localhost:8080/protected ).    

Spring Security is configured in the spring-config.xml file to treat the protected url as a protected resource and delegates
to spring-social-security for authentication via the springSocialSecurityAuthenticationFilter bean.

Users are then asked to login via spring-social, and once they have authenticated with Twitter they are redirected back
to the application and locally logged in.

The bulk of this application sets up the environment for Spring Social and Spring Security, the spring-social-security
bridge between these two frameworks is configured in a few lines of configuration

<code>

  <!-- Start Spring Social Security -->
	<import resource="classpath:/spring-social-security-config.xml" />

	<!-- Scan classpath for components, including our Social Security Configuration 
		class -->
	<context:component-scan
		base-package="org.socialsignin.springframework.social.security" />

	<!-- End Spring Social Security -->

</code>

The only additional code which is needed for this spring-social-security demo is the FacebookConnectInterceptor,
needed because the Spring-Social framework requires API-specific connect interceptors to be registered before
they can be called.  This interceptor is registered with the ConnectController as below:

<code>

<bean class="org.springframework.social.connect.web.ConnectController">
  	<!-- relies on by-type autowiring for the constructor-args -->
		<property name="applicationUrl" value="${application.secureUrl}" />

		<property name="interceptors">
			<list>
    	    	<ref bean="facebookConnectInterceptor" />
			</list>
		</property>
	</bean>

</code>










